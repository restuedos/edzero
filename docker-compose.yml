services:
  app:
    build:
      context: ./docker/8.4
      dockerfile: Dockerfile
      args:
        WWWUSER: ${WWWUSER:-1000}
        WWWGROUP: ${WWWGROUP:-1337}
        APP_VERSION: ${APP_VERSION:-unknown}
        APP_COMMIT: ${APP_COMMIT:-unknown}
        APP_BUILD_TIME: ${APP_BUILD_TIME:-unknown}
    image: edzero/app:latest
    depends_on:
      - pgsql
      - mailpit
      - minio
      - soketi
    expose:
      - "9000"
    environment:
      SUPERVISOR_PHP_USER: www-data
      APP_VERSION: ${APP_VERSION:-unknown}
      APP_COMMIT: ${APP_COMMIT:-unknown}
      APP_BUILD_TIME: ${APP_BUILD_TIME:-unknown}
      APP_ENV: ${APP_ENV}
      APP_KEY: ${APP_KEY}
      APP_DEBUG: ${APP_DEBUG}
      APP_URL: ${APP_URL}
      DB_HOST: pgsql
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - .:/var/www/html
    networks:
      - app_net

  pgsql:
    image: postgres:17
    ports:
      - '${FORWARD_DB_PORT:-5432}:5432'
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgsql-data:/var/lib/postgresql/data
      - ./docker/pgsql/create-testing-database.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql
    networks:
      - app_net
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}"]
      retries: 3
      timeout: 5s

  redis:
    image: redis:alpine
    ports:
      - '${FORWARD_REDIS_PORT:-6379}:6379'
    volumes:
      - redis-data:/data
    networks:
      - app_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      retries: 3
      timeout: 5s

  meilisearch:
    image: getmeili/meilisearch:latest
    ports:
      - '${FORWARD_MEILISEARCH_PORT:-7700}:7700'
    environment:
      MEILI_NO_ANALYTICS: ${MEILISEARCH_NO_ANALYTICS:-false}
    volumes:
      - meilisearch-data:/meili_data
    networks:
      - app_net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://127.0.0.1:7700/health"]
      retries: 3
      timeout: 5s

  mailpit:
    image: axllent/mailpit:latest
    ports:
      - '${FORWARD_MAILPIT_PORT:-1025}:1025'
      - '${FORWARD_MAILPIT_DASHBOARD_PORT:-8025}:8025'
    networks:
      - app_net

  minio:
    image: minio/minio:latest
    ports:
      - '${FORWARD_MINIO_PORT:-9000}:9000'
      - '${FORWARD_MINIO_CONSOLE_PORT:-8900}:8900'
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    volumes:
      - minio-data:/data
      - ./docker/minio/entrypoint.sh:/entrypoint.sh:ro
    entrypoint: ["/entrypoint.sh"]
    networks:
      - app_net
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      retries: 3
      timeout: 5s

  nginx:
    image: nginx:stable-alpine
    ports:
      - "${APP_PORT:-80}:80"
      - "${APP_TLS_PORT:-443}:443"
    depends_on:
      - app
    volumes:
      - .:/var/www/html:ro
      - ./docker/8.4/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    networks:
      app_net:
        aliases:
          - s3.edzero.co.id

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 1 & wait $${!}; done'"
    networks:
      - app_net

  rabbitmq:
    image: rabbitmq:4-management
    hostname: rabbitmq
    ports:
      - '${FORWARD_RABBITMQ_PORT:-5672}:5672'
      - '${FORWARD_RABBITMQ_DASHBOARD_PORT:-15672}:15672'
    environment:
      RABBITMQ_HOST: '%'
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_VHOST: ${RABBITMQ_VHOST}
      RABBITMQ_QUEUE: ${RABBITMQ_QUEUE}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app_net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      retries: 3
      timeout: 5s

  selenium:
    image: selenium/standalone-chromium
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - '/dev/shm:/dev/shm'
    networks:
      - app_net

  soketi:
    image: quay.io/soketi/soketi:latest-16-alpine
    ports:
      - '${PUSHER_PORT:-6001}:6001'
      - '${PUSHER_METRICS_PORT:-9601}:9601'
    environment:
      SOKETI_DEBUG: ${SOKETI_DEBUG:-0}
      SOKETI_METRICS_SERVER_PORT: '9601'
      SOKETI_DEFAULT_APP_ID: ${PUSHER_APP_ID}
      SOKETI_DEFAULT_APP_KEY: ${PUSHER_APP_KEY}
      SOKETI_DEFAULT_APP_SECRET: ${PUSHER_APP_SECRET}
    networks:
      - app_net

networks:
  app_net:
    driver: bridge

volumes:
  pgsql-data:
    driver: local
  minio-data:
    driver: local
  redis-data:
    driver: local
  meilisearch-data:
    driver: local
  rabbitmq-data:
    driver: local
